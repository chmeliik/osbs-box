#!/usr/bin/env python3
import argparse
import koji
import os
import requests
import subprocess
import hashlib


BLUE = '\033[34m'
BOLD = '\033[1m'
RESET = '\033[0m'

DEFAULT_DOWNLOAD_BLOCK_SIZE = 10 * 1024 * 1024  # 10Mb

KOJIHUB = 'https://localhost/kojihub'
KOJIADMIN = 'kojiadmin'

CERT = f'/etc/pki/koji/{KOJIADMIN}.pem'
SERVERCA = '/etc/pki/koji/osbs-box-ca.crt'

DEST_TAG = 'dest'
TARGET = 'candidate'


def info(msg):
    print(f'{BLUE}INFO:{RESET} {msg}')


def bold(s):
    return f'{BOLD}{s}{RESET}'


class BuildStealer(object):

    def __init__(self, nvr, kojihub, kojiroot):
        self.nvr = nvr

        self.pathinfo = koji.PathInfo(topdir=kojiroot)
        self.remote_session = koji.ClientSession(kojihub)

        self.local_session = koji.ClientSession(KOJIHUB)
        self.local_session.ssl_login(cert=CERT, serverca=SERVERCA)

        self.output_dir = os.path.join('/mnt/koji/work/build-stealer', nvr)

        self.build_info = None
        self.build_metadata = None
        self.build_metadata_url = None

    def start(self):
        self.get_build_info()
        self.get_build_metadata()
        self.download_build_files()
        self.add_build_owner()
        self.add_build_package()
        self.import_build()
        self.show_info()

    def get_build_info(self):
        self.build_info = self.remote_session.getBuild(self.nvr, strict=True)

    def get_build_metadata(self):
        self.build_metadata_url = os.path.join(self.pathinfo.build(self.build_info),
                                               'metadata.json')
        response = requests.get(self.build_metadata_url)
        response.raise_for_status()
        self.build_metadata = response.json()

    def download_build_files(self):
        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)

        info(f'Downloading files for build {bold(self.nvr)}')

        for output in self.build_metadata['output']:
            url, dest = self._resolve_file_download(output)
            print(f'Downloading {output["filename"]}')
            self._download_file(url, dest, output['checksum'])

    def _resolve_file_download(self, output):
        dest_path = os.path.join(self.output_dir, output['filename'])

        url_bases = {
            'log': self.pathinfo.build_logs,
            'docker-image': self.pathinfo.imagebuild,
        }
        url_base = url_bases[output['type']](self.build_info)
        url = os.path.join(url_base, output['filename'])

        return (url, dest_path)

    def add_build_owner(self):
        owner_name = self.build_info['owner_name']
        if self.local_session.getUser(owner_name) is None:
            self.local_session.createUser(owner_name)

    def add_build_package(self):
        owner_name = self.build_info['owner_name']
        package_name = self.build_info['package_name']
        self.local_session.packageListAdd(DEST_TAG, package_name, owner=KOJIADMIN)

    def import_build(self):
        metadata_filename = 'metadata-{}.json'.format(self.nvr)
        metadata_path = os.path.join(self.output_dir, metadata_filename)
        self._download_file(self.build_metadata_url, metadata_path)

        # TODO: Create a new koji session with local defaults instead of calling koji process.
        info(f'Importing build {bold(self.nvr)} '
             f'from metadata: {bold(metadata_filename)}')
        subprocess.call(['koji', 'import-cg', '--link', metadata_path, self.output_dir])

        # TODO: For some reason the logs don't appear in final build.

    def _download_file(self, url, dest, expected_checksum=None):
        checksum = hashlib.md5()
        request = requests.get(url, stream=True)
        request.raise_for_status()

        with open(dest, 'wb') as f:
            for chunk in request.iter_content(chunk_size=DEFAULT_DOWNLOAD_BLOCK_SIZE):
                f.write(chunk)
                checksum.update(chunk)

        if expected_checksum and checksum.hexdigest() != expected_checksum:
            raise ValueError(
                'Computed md5 checksum, {}, does not match expected checksum, {}'
                .format(checksum.hexdigest(), expected_checksum))

    def show_info(self):
        build_source = self.build_info['source']
        package_name = self.build_info['package_name']

        info(f'Run container-build:\n'
             f'koji container-build {TARGET} \\\n'
             f'     {build_source} \\\n'
             f'     --git-branch <idk>')

        info(f'Run source-container-build:\n'
             f'koji add-pkg {DEST_TAG} {package_name}-source --owner {KOJIADMIN}\n'
             f'koji source-container-build {TARGET} \\\n'
             f'     --koji-build-nvr={self.nvr}')


def parse_args():
    parser = argparse.ArgumentParser(
        description="Take a build from another Koji instance and load it here.")

    parser.add_argument('nvr', help='Name-Version-Release of build to be moved')
    parser.add_argument('--kojihub', required=True, help='Koji Hub API to pull build from')
    parser.add_argument('--kojiroot', required=True, help='Koji Top Dir to pull build from')

    return parser.parse_args()


if __name__ == '__main__':
    args = parse_args()
    BuildStealer(args.nvr, args.kojihub, args.kojiroot).start()
